class Endpoint {
    constructor(method, path) {
        this.method = method;
        this.path = path;
    }
}

module.exports = {
    Endpoint,
    Endpoints: {
        GET_GLOBAL_APPLICATION_COMMANDS:                     (applicationId)                       => new Endpoint('GET',    `/applications/${applicationId.toString()}/commands`),
        POST_GLOBAL_APPLICATION_COMMANDS:                    (applicationId)                       => new Endpoint('POST',   `/applications/${applicationId.toString()}/commands`),
        GET_GLOBAL_APPLICATION_COMMAND:                      (applicationId, commandId)            => new Endpoint('GET',    `/applications/${applicationId.toString()}/commands/${commandId.toString()}`),
        EDIT_GLOBAL_APPLICATION_COMMAND:                     (applicationId, commandId)            => new Endpoint('PATCH',  `/applications/${applicationId.toString()}/commands/${commandId.toString()}`),
        DELETE_GLOBAL_APPLICATION_COMMAND:                   (applicationId, commandId)            => new Endpoint('DELETE', `/applications/${applicationId.toString()}/commands/${commandId.toString()}`),
        BULK_OVERWRITE_GLOBAL_APPLICATION_COMMANDS:          (applicationId)                       => new Endpoint('PUT',    `/applications/${applicationId.toString()}/commands`),
        GET_GUILD_APPLICATION_COMMANDS:                      (applicationId, guildId)              => new Endpoint('GET',    `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands`),
        POST_GUILD_APPLICATION_COMMANDS:                     (applicationId, guildId)              => new Endpoint('POST',   `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands`),
        GET_GUILD_APPLICATION_COMMAND:                       (applicationId, guildId, commandId)   => new Endpoint('GET',    `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands/${commandId.toString()}`),
        EDIT_GUILD_APPLICATION_COMMAND:                      (applicationId, guildId, commandId)   => new Endpoint('PATCH',  `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands/${commandId.toString()}`),
        DELETE_GUILD_APPLICATION_COMMAND:                    (applicationId, guildId, commandId)   => new Endpoint('DELETE', `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands/${commandId.toString()}`),
        BULK_OVERWRITE_GUILD_APPLICATION_COMMANDS:           (applicationId, guildId)              => new Endpoint('PUT',    `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands`),
        GET_APPLICATION_COMMAND_PERMISSIONS:                 (applicationId, guildId, commandId)   => new Endpoint('GET',    `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands/${commandId.toString()}/permissions`),
        EDIT_APPLICATION_COMMAND_PERMISSIONS:                (applicationId, guildId, commandId)   => new Endpoint('PUT',    `/applications/${applicationId.toString()}/guilds/${guildId.toString()}/commands/${commandId.toString()}/permissions`),
        CREATE_INTERACTION_RESPONSE:                         (interactionId, interactionToken)     => new Endpoint('POST',   `/interactions/${interactionId.toString()}/${encodeURIComponent(interactionToken)}/callback`),
        GET_ORIGINAL_INTEARCTION_RESPONSE:                   (applicationId, interactionToken)     => new Endpoint('GET',    `/webhooks/${applicationId.toString()}/${encodeURIComponent(interactionToken)}/messages/@original`),
        EDIT_ORIGINAL_INTEARCTION_RESPONSE:                  (applicationId, interactionToken)     => new Endpoint('PATCH',  `/webhooks/${applicationId.toString()}/${encodeURIComponent(interactionToken)}/messages/@original`),
        DELETE_ORIGINAL_INTEARCTION_RESPONSE:                (applicationId, interactionToken)     => new Endpoint('DELETE', `/webhooks/${applicationId.toString()}/${encodeURIComponent(interactionToken)}/messages/@original`),
        CREATE_FOLLOWUP_MESSAGE:                             (applicationId, interactionToken)     => new Endpoint('POST',   `/webhooks/${applicationId.toString()}/${encodeURIComponent(interactionToken)}`),
        GET_CURRENT_APPLICATION:                             ()                                    => new Endpoint('GET',    '/applications/@me'),
        EDIT_CURRENT_APPLICATION:                            ()                                    => new Endpoint('PATCH',  '/applications/@me'),
        GET_APPLICATION_ROLE_CONNECTION_METADATA_RECORDS:    (applicationId)                       => new Endpoint('GET',    `/applications/${applicationId.toString()}/role-connections/metadata`),
        UPDATE_APPLICATION_ROLE_CONNECTION_METADATA_RECORDS: (applicationId)                       => new Endpoint('PUT',    `/applications/${applicationId.toString()}/role-connections/metadata`),
        GET_GUILD_AUDIT_LOG:                                 (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/audit-logs`),
        LIST_AUTO_MODERATION_RULES_FOR_GUILD:                (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/auto-moderation/rules`),
        GET_AUTO_MODERATION_RULE:                            (guildId, autoModerationRuleId)       => new Endpoint('GET',    `/guilds/${guildId.toString()}/auto-moderation/rules/${autoModerationRuleId.toString()}`),
        CREATE_AUTO_MODERATION_RULE:                         (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/auto-moderation/rules`),
        MODIFY_AUTO_MODERATION_RULE:                         (guildId, autoModerationRuleId)       => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/auto-moderation/rules/${autoModerationRuleId.toString()}`),
        DELETE_AUTO_MODERATION_RULE:                         (guildId, autoModerationRuleId)       => new Endpoint('DELETE', `/guilds/${guildId.toString()}/auto-moderation/rules/${autoModerationRuleId.toString()}`),
        GET_CHANNEL:                                         (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}`),
        MODIFY_CHANNEL:                                      (channelId)                           => new Endpoint('PATCH',  `/channels/${channelId.toString()}`),
        DELETE_CHANNEL:                                      (channelId)                           => new Endpoint('DELETE', `/channels/${channelId.toString()}`),
        GET_CHANNEL_MESSAGES:                                (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/messages`),
        GET_CHANNEL_MESSAGE:                                 (channelId, messageId)                => new Endpoint('GET',    `/channels/${channelId.toString()}/messages/${messageId.toString()}`),
        CREATE_MESSAGE:                                      (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/messages`),
        CROSSPOST_MESSAGE:                                   (channelId, messageId)                => new Endpoint('POST',   `/channels/${channelId.toString()}/messages/${messageId.toString()}/crosspost`),
        CREATE_REACTION:                                     (channelId, messageId, emoji)         => new Endpoint('PUT',    `/channels/${channelId.toString()}/messages/${messageId.toString()}/reactions/${emoji.encode()}/@me`),
        DELETE_OWN_REACTION:                                 (channelId, messageId, emoji)         => new Endpoint('DELETE', `/channels/${channelId.toString()}/messages/${messageId.toString()}/reactions/${emoji.encode()}/@me`),
        DELETE_USER_REACTION:                                (channelId, messageId, emoji, userId) => new Endpoint('DELETE', `/channels/${channelId.toString()}/messages/${messageId.toString()}/reactions/${emoji.encode()}/${userId.toString()}`),
        GET_REACTIONS:                                       (channelId, messageId, emoji)         => new Endpoint('GET',    `/channels/${channelId.toString()}/messages/${messageId.toString()}/reactions/${emoji.encode()}`),
        DELETE_ALL_REACTIONS:                                (channelId, messageId)                => new Endpoint('DELETE', `/channels/${channelId.toString()}/messages/${messageId.toString()}/reactions`),
        DELETE_ALL_REACTIONS_FOR_EMOJI:                      (channelId, messageId, emoji)         => new Endpoint('DELETE', `/channels/${channelId.toString()}/messages/${messageId.toString()}/reactions/${emoji.encode()}`),
        EDIT_MESSAGE:                                        (channelId, messageId)                => new Endpoint('PATCH',  `/channels/${channelId.toString()}/messages/${messageId.toString()}`),
        DELETE_MESSAGE:                                      (channelId, messageId)                => new Endpoint('DELETE', `/channels/${channelId.toString()}/messages/${messageId.toString()}`),
        BULK_DELETE_MESSAGES:                                (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/messages/bulk-delete`),
        EDIT_CHANNEL_PERMISSIONS:                            (channelId, overwriteId)              => new Endpoint('PUT',    `/channels/${channelId.toString()}/permissions/${overwriteId.toString()}`),
        GET_CHANNEL_INVITES:                                 (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/invites`),
        CREATE_CHANNEL_INVITE:                               (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/invites`),
        DELETE_CHANNEL_PERMISSION:                           (channelId, overwriteId)              => new Endpoint('DELETE', `/channels/${channelId.toString()}/permissions/${overwriteId.toString()}`),
        FOLLOW_ANNOUNCEMENT_CHANNEL:                         (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/followers`),
        TRIGGER_TYPING_INDICATOR:                            (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/typing`),
        GET_PINNED_MESSAGES:                                 (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/pins`),
        PIN_MESSAGE:                                         (channelId, messageId)                => new Endpoint('PUT',    `/channels/${channelId.toString()}/pins/${messageId.toString()}`),
        UNPIN_MESSAGE:                                       (channelId, messageId)                => new Endpoint('DELETE', `/channels/${channelId.toString()}/pins/${messageId.toString()}`),
        GROUP_DM_ADD_RECIPIENT:                              (channelId, userId)                   => new Endpoint('PUT',    `/channels/${channelId.toString()}/recipients/${userId.toString()}`),
        GROUP_DM_REMOVE_RECIPIENT:                           (channelId, userId)                   => new Endpoint('DELETE', `/channels/${channelId.toString()}/recipients/${userId.toString()}`),
        START_THREAD_FROM_MESSAGE:                           (channelId, messageId)                => new Endpoint('POST',   `/channels/${channelId.toString()}/messages/${messageId.toString()}/threads`),
        START_THREAD_WITHOUT_MESSAGE:                        (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/threads`),
        START_THREAD_IN_FORUM_OR_MEDIA_CHANNEL:              (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/threads`),
        JOIN_THREAD:                                         (channelId)                           => new Endpoint('PUT',    `/channels/${channelId.toString()}/thread-members/@me`),
        ADD_THREAD_MEMBER:                                   (channelId, userId)                   => new Endpoint('PUT',    `/channels/${channelId.toString()}/thread-members/${userId.toString()}`),
        LEAVE_THREAD:                                        (channelId)                           => new Endpoint('DELETE', `/channels/${channelId.toString()}/thread-members/@me`),
        REMOVE_THREAD_MEMBER:                                (channelId, userId)                   => new Endpoint('DELETE', `/channels/${channelId.toString()}/thread-members/${userId.toString()}`),
        GET_THREAD_MEMBER:                                   (channelId, userId)                   => new Endpoint('GET',    `/channels/${channelId.toString()}/thread-members/${userId.toString()}`),
        LIST_THREAD_MEMBERS:                                 (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/thread-members`),
        LIST_PUBLIC_ARCHIVED_THREADS:                        (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/threads/archived/public`),
        LIST_PRIVATE_ARCHIVED_THREADS:                       (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/threads/archived/private`),
        LIST_JOINED_PRIVATE_ARCHIVED_THREADS:                (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/users/@me/threads/archived/private`),
        LIST_GUILD_EMOJIS:                                   (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/emojis`),
        GET_GUILD_EMOJI:                                     (guildId, emojiId)                    => new Endpoint('GET',    `/guilds/${guildId.toString()}/emojis/${emojiId.toString()}`),
        CREATE_GUILD_EMOJI:                                  (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/emojis`),
        MODIFY_GUILD_EMOJI:                                  (guildId, emojiId)                    => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/emojis/${emojiId.toString()}`),
        DELETE_GUILD_EMOJI:                                  (guildId, emojiId)                    => new Endpoint('DELETE', `/guilds/${guildId.toString()}/emojis/${emojiId.toString()}`),
        CREATE_GUILD:                                        ()                                    => new Endpoint('POST',   '/guilds'),
        GET_GUILD:                                           (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}`),
        GET_GUILD_PREVIEW:                                   (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/preview`),
        MODIFY_GUILD:                                        (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}`),
        DELETE_GUILD:                                        (guildId)                             => new Endpoint('DELETE', `/guilds/${guildId.toString()}`),
        GET_GUILD_CHANNELS:                                  (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/channels`),
        CREATE_GUILD_CHANNEL:                                (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/channels`),
        MODIFY_GUILD_CHANNEL_POSITIONS:                      (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/channels`),
        LIST_ACTIVE_GUILD_THREADS:                           (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/threads/active`),
        GET_GUILD_MEMBER:                                    (guildId, userId)                     => new Endpoint('GET',    `/guilds/${guildId.toString()}/members/${userId.toString()}`),
        LIST_GUILD_MEMBERS:                                  (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/members`),
        SEARCH_GUILD_MEMBERS:                                (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/members/search`),
        ADD_GUILD_MEMBER:                                    (guildId, userId)                     => new Endpoint('PUT',    `/guilds/${guildId.toString()}/members/${userId.toString()}`),
        MODIFY_GUILD_MEMBER:                                 (guildId, userId)                     => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/members/${userId.toString()}`),
        MODIFY_CURRENT_MEMBER:                               (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/members/@me`),
        ADD_GUILD_MEMBER_ROLE:                               (guildId, userId, roleId)             => new Endpoint('PUT',    `/guilds/${guildId.toString()}/members/${userId.toString()}/roles/${roleId.toString()}`),
        REMOVE_GUILD_MEMBER_ROLE:                            (guildId, userId, roleId)             => new Endpoint('DELETE', `/guilds/${guildId.toString()}/members/${userId.toString()}/roles/${roleId.toString()}`),
        REMOVE_GUILD_MEMBER:                                 (guildId, userId)                     => new Endpoint('DELETE', `/guilds/${guildId.toString()}/members/${userId.toString()}`),
        GET_GUILD_BANS:                                      (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/bans`),
        GET_GUILD_BAN:                                       (guildId, userId)                     => new Endpoint('GET',    `/guilds/${guildId.toString()}/bans/${userId.toString()}`),
        CREATE_GUILD_BAN:                                    (guildId, userId)                     => new Endpoint('PUT',    `/guilds/${guildId.toString()}/bans/${userId.toString()}`),
        REMOVE_GUILD_BAN:                                    (guildId, userId)                     => new Endpoint('DELETE', `/guilds/${guildId.toString()}/bans/${userId.toString()}`),
        GET_GUILD_ROLES:                                     (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/roles`),
        CREATE_GUILD_ROLE:                                   (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/roles`),
        MODIFY_GUILD_ROLE_POSITIONS:                         (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/roles`),
        MODIFY_GUILD_ROLE:                                   (guildId, roleId)                     => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/roles/${roleId.toString()}`),
        MODIFY_GUILD_MFA_LEVEL:                              (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/mfa`),
        DELETE_GUILD_ROLE:                                   (guildId, roleId)                     => new Endpoint('DELETE', `/guilds/${guildId.toString()}/roles/${roleId.toString()}`),
        GET_GUILD_PRUNE_COUNT:                               (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/prune`),
        BEGIN_GUILD_PRUNE:                                   (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/prune`),
        GET_GUILD_VOICE_REGIONS:                             (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/regions`),
        GET_GUILD_INVITES:                                   (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/invites`),
        GET_GUILD_INTEGRATIONS:                              (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/integrations`),
        DELETE_GUILD_INTEGRATION:                            (guildId, integrationId)              => new Endpoint('DELETE', `/guilds/${guildId.toString()}/integrations/${integrationId.toString()}`),
        GET_GUILD_WIDGET_SETTINGS:                           (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/widget`),
        MODIFY_GUILD_WIDGET:                                 (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/widget`),
        GET_GUILD_WIDGET:                                    (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/widget.json`),
        GET_GUILD_VANITY_URL:                                (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/vanitry-url`),
        GET_GUILD_WIDGET_IMAGE:                              (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/widget.png`),
        GET_GUILD_WELCOME_SCREEN:                            (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/welcome-screen`),
        MODIFY_GUILD_WELCOME_SCREEN:                         (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/welcome-screen`),
        GET_GUILD_ONBOARDING:                                (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/onboarding`),
        MODIFY_GUILD_ONBOARDING:                             (guildId)                             => new Endpoint('PUT',    `/guilds/${guildId.toString()}/onboarding`),
        MODIFY_CURRENT_USER_VOICE_STATE:                     (guildId)                             => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/voice-states/@me`),
        MODIFY_USER_VOICE_STATE:                             (guildId, userId)                     => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/voice-states/${userId.toString()}`),
        LIST_SCHEDULED_EVENTS_FOR_GUILD:                     (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/scheduled-events`),
        CREATE_GUILD_SCHEDULED_EVENT:                        (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/scheduled-events`),
        GET_GUILD_SCHEDULED_EVENT:                           (guildId, guildScheduledEventId)      => new Endpoint('GET',    `/guilds/${guildId.toString()}/scheduled-events/${guildScheduledEventId.toString()}`),
        MODIFY_GUILD_SCHEDULED_EVENT:                        (guildId, guildScheduledEventId)      => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/scheduled-events/${guildScheduledEventId.toString()}`),
        DELETE_GUILD_SCHEDULED_EVENT:                        (guildId, guildScheduledEventId)      => new Endpoint('DELETE', `/guilds/${guildId.toString()}/scheduled-events/${guildScheduledEventId.toString()}`),
        GET_GUILD_SCHEDULED_EVENT_USERS:                     (guildId, guildScheduledEventId)      => new Endpoint('GET',    `/guilds/${guildId.toString()}/scheduled-events/${guildScheduledEventId.toString()}/users`),
        GET_GUILD_TEMPLATE:                                  (templateCode)                        => new Endpoint('GET',    `/guilds/templates/${encodeURIComponent(templateCode)}`),
        CREATE_GUILD_FROM_GUILD_TEMPLATE:                    (templateCode)                        => new Endpoint('POST',   `/guilds/templates/${encodeURIComponent(templateCode)}`),
        GET_GUILD_TEMPLATES:                                 (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/templates`),
        CREATE_GUILD_TEMPLATE:                               (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/templates`),
        SYNC_GUILD_TEMPLATE:                                 (guildId, templateCode)               => new Endpoint('PUT',    `/guilds/${guildId.toString()}/templates/${encodeURIComponent(templateCode)}`),
        MODIFY_GUILD_TEMPLATE:                               (guildId, templateCode)               => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/templates/${encodeURIComponent(templateCode)}`),
        DELETE_GUILD_TEMPLATE:                               (guildId, templateCode)               => new Endpoint('DELETE', `/guilds/${guildId.toString()}/templates/${encodeURIComponent(templateCode)}`),
        GET_INVITE:                                          (inviteCode)                          => new Endpoint('GET',    `/invites/${encodeURIComponent(inviteCode)}`),
        DELETE_INVITE:                                       (inviteCode)                          => new Endpoint('DELETE', `/invites/${encodeURIComponent(inviteCode)}`),
        CREATE_STAGE_INSTANCE:                               ()                                    => new Endpoint('POST',   '/stage-instances'),
        GET_STAGE_INSTANCE:                                  (channelId)                           => new Endpoint('GET',    `/stage-instances/${channelId.toString()}`),
        MODIFY_STAGE_INSTANCE:                               (channelId)                           => new Endpoint('PATCH',  `/stage-instances/${channelId.toString()}`),
        DELETE_STAGE_INSTANCE:                               (channelId)                           => new Endpoint('DELETE', `/stage-instances/${channelId.toString()}`),
        GET_STICKER:                                         (stickerId)                           => new Endpoint('GET',    `/stickers/${stickerId.toString()}`),
        LIST_STICKER_PACKS:                                  ()                                    => new Endpoint('GET',    '/sticker-packs'),
        LIST_GUILD_STICKERS:                                 (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/stickers`),
        GET_GUILD_STICKER:                                   (guildId, stickerId)                  => new Endpoint('GET',    `/guilds/${guildId.toString()}/stickers/${stickerId.toString()}`),
        CREATE_GUILD_STICKER:                                (guildId)                             => new Endpoint('POST',   `/guilds/${guildId.toString()}/stickers`),
        MODIFY_GUILD_STICKER:                                (guildId, stickerId)                  => new Endpoint('PATCH',  `/guilds/${guildId.toString()}/stickers/${stickerId.toString()}`),
        DELETE_GUILD_STICKER:                                (guildId, stickerId)                  => new Endpoint('DELETE', `/guilds/${guildId.toString()}/stickers/${stickerId.toString()}`),
        GET_CURRENT_USER:                                    ()                                    => new Endpoint('GET',    '/users/@me'),
        GET_USER:                                            (userId)                              => new Endpoint('GET',    `/users/${userId.toString()}`),
        MODIFY_CURRENT_USER:                                 ()                                    => new Endpoint('PATCH',  '/users/@me'),
        GET_CURRENT_USER_GUILDS:                             ()                                    => new Endpoint('GET',    '/users/@me/guilds'),
        GET_CURRENT_USER_GUILD_MEMBER:                       (guildId)                             => new Endpoint('GET',    `/users/@me/guilds/${guildId.toString()}/member`),
        LEAVE_GUILD:                                         (guildId)                             => new Endpoint('DELETE', `/users/@me/guilds/${guildId.toString()}`),
        CREATE_DM:                                           ()                                    => new Endpoint('POST',   '/users/@me/channels'),
        CREATE_GROUP_DM:                                     ()                                    => new Endpoint('POST',   '/users/@me/channels'),
        GET_CURRENT_USER_CONNECTIONS:                        ()                                    => new Endpoint('GET',    '/users/@me/connections'),
        GET_CURRENT_USER_APPLICATION_ROLE_CONNECTION:        (applicationId)                       => new Endpoint('GET',    `/users/@me/applications/${applicationId.toString()}/role-connection`),
        UPDATE_CURRENT_USER_APPLICATION_ROLE_CONNECTION:     (applicationId)                       => new Endpoint('PUT',    `/users/@me/applications/${applicationId.toString()}/role-connection`),
        LIST_VOICE_REGIONS:                                  ()                                    => new Endpoint('GET',    '/voice/regions'),
        CREATE_WEBHOOK:                                      (channelId)                           => new Endpoint('POST',   `/channels/${channelId.toString()}/webhooks`),
        GET_CHANNEL_WEBHOOKS:                                (channelId)                           => new Endpoint('GET',    `/channels/${channelId.toString()}/webhooks`),
        GET_GUILD_WEBHOOKS:                                  (guildId)                             => new Endpoint('GET',    `/guilds/${guildId.toString()}/webhooks`),
        GET_WEBHOOK:                                         (webhookId)                           => new Endpoint('GET',    `/webhooks/${webhookId.toString()}`),
        GET_WEBHOOK_WITH_TOKEN:                              (webhookId, webhookToken)             => new Endpoint('GET',    `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}`),
        MODIFY_WEBHOOK:                                      (webhookId)                           => new Endpoint('PATCH',  `/webhooks/${webhookId.toString()}`),
        MODIFY_WEBHOOK_WITH_TOKEN:                           (webhookId, webhookToken)             => new Endpoint('PATCH',  `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}`),
        DELETE_WEBHOOK:                                      (webhookId)                           => new Endpoint('DELETE', `/webhooks/${webhookId.toString()}`),
        DELETE_WEBHOOK_WITH_TOKEN:                           (webhookId, webhookToken)             => new Endpoint('DELETE', `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}`),
        EXECUTE_WEBHOOK:                                     (webhookId, webhookToken)             => new Endpoint('POST',   `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}`),
        GET_WEBHOOK_MESSAGE:                                 (webhookId, webhookToken, messageId)  => new Endpoint('GET',    `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}/messages/${messageId.toString()}`),
        EDIT_WEBHOOK_MESSAGE:                                (webhookId, webhookToken, messageId)  => new Endpoint('PATCH',  `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}/messages/${messageId.toString()}`),
        DELETE_WEBHOOK_MESSAGE:                              (webhookId, webhookToken, messageId)  => new Endpoint('DELETE', `/webhooks/${webhookId.toString()}/${encodeURIComponent(webhookToken)}/messages/${messageId.toString()}`),
        GET_GATEWAY:                                         ()                                    => new Endpoint('GET',    '/gateway'),
        GET_GATEWAY_BOT:                                     ()                                    => new Endpoint('GET',    '/gateway/bot'),
    }
};
